/* Generated By:JavaCC: Do not edit this line. PCodeParser.java */
package parser;

import java.io.*;
import java.util.*;
import ast.*;

public class PCodeParser implements PCodeParserConstants {
        public static void main( String[] args ) {
                try {
                        PCodeParser lParser = new PCodeParser( new FileInputStream( args[0] ) );
                        ArrayList< PCode > lInstructions = lParser.Program();
                        System.out.println( "PCode accepted:" );
                        for ( PCode pc : lInstructions ) {
                                System.out.println( pc );
                        }
                } catch (ParseException e) {
                        System.out.println( "Syntax Error : \u005cn"+ e.toString() );
                } catch( java.io.FileNotFoundException e ) {
                        System.err.println( e.toString() );
                }
        }

  final public ArrayList< PCode > Program() throws ParseException {
        ArrayList< PCode > Result = new ArrayList< PCode >();
        PCode lInstruction = null;
    label_1:
    while (true) {
      lInstruction = PCodeInstruction();
                                             Result.add( lInstruction );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
          {if (true) return Result;}
    throw new Error("Missing return statement in function");
  }

  final public PCode PCodeInstruction() throws ParseException {
        PCodeArgument argument;
        Token instruction;
        Token string;
        Token variable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      instruction = jj_consume_token(1);
      string = jj_consume_token(STRING);
                {if (true) return new Print(instruction, string);}
      break;
    case 2:
      instruction = jj_consume_token(2);
          {if (true) return new Add(instruction);}
      break;
    case 3:
      instruction = jj_consume_token(3);
          {if (true) return new Sub(instruction);}
      break;
    case 4:
      instruction = jj_consume_token(4);
          {if (true) return new Mul(instruction);}
      break;
    case 5:
      instruction = jj_consume_token(5);
          {if (true) return new Div(instruction);}
      break;
    case 6:
      instruction = jj_consume_token(6);
          {if (true) return new Dup(instruction);}
      break;
    case 7:
      instruction = jj_consume_token(7);
      argument = PCodeArgument();
          {if (true) return new Load( instruction, argument );}
      break;
    case 8:
      instruction = jj_consume_token(8);
      variable = jj_consume_token(VARIABLE);
          {if (true) return new Store( instruction, variable );}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PCodeArgument PCodeArgument() throws ParseException {
        Token arg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      arg = jj_consume_token(VARIABLE);
          {if (true) return new PCodeVariable( arg );}
      break;
    case NUMBER:
      arg = jj_consume_token(NUMBER);
          {if (true) return new PCodeNumber( arg );}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PCodeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fe,0x1fe,0x14000,};
   }

  /** Constructor with InputStream. */
  public PCodeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PCodeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PCodeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PCodeParser(PCodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PCodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
